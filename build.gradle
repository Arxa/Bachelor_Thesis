import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
        classpath "com.gradle:build-scan-plugin:1.11"
    }
    repositories {
        //mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}


//buildscript {
//    ext {
//        dl4j_version = "0.9.1"
//        kotlin_version = "1.1.4-3"
//    }
//    repositories {
//        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
//        mavenCentral()
//    }
//    dependencies {
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
//    }
//}

apply plugin: "com.gradle.build-scan"
//apply plugin: "kotlin"
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'javafx-gradle-plugin'
apply plugin: 'war' // for build excludes

sourceSets {
    main {
        resources {
            exclude 'Outputs/**'
        }
    }
}

jar.enabled = false
//sourceCompatibility =
//targetCompatibility = 1.8
mainClassName = "Main"

repositories{
    //maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}

//jar {
//    zip64 = true
//}

ext {

    if (Os.isFamily(Os.FAMILY_UNIX)) {
        os = 'linux'
    }
    if (Os.isFamily(Os.FAMILY_MAC)) {
        os = 'macosx'
    }
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        os = 'windows'
    }
    arch = System.getProperty("os.arch")

    if(arch == 'amd64'){
        arch = 'x86_64'
    }
    opencvBinaryClassifer = os+'-'+arch

}

dependencies {

    // Local libraries
    compile fileTree('lib')

    // General
    compile group: 'colt', name: 'colt', version: '1.2.0'
    compile group: 'com.google.guava', name: 'guava', version: '23.3-jre'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'

    // Tesseract - OCR
    compile group: 'org.bytedeco.javacpp-presets', name: 'tesseract', version: '3.04.01-1.3'
    compile group: 'org.bytedeco.javacpp-presets', name: 'tesseract', version: '3.04.01-1.3', classifier: opencvBinaryClassifer
    compile group: 'org.bytedeco.javacpp-presets', name: 'leptonica', version: '1.73-1.3', classifier: opencvBinaryClassifer
    compile group: 'org.languagetool', name: 'language-en', version: '3.8'

    // DeepLearning4J
//    compile "org.deeplearning4j:deeplearning4j-core:${dl4j_version}"
//    compile group: 'org.deeplearning4j', name: 'deeplearning4j-ui_2.10', version: '0.9.1'
//    compile "org.nd4j:nd4j-native-platform:${dl4j_version}"

    // Testing
    testCompile group: 'org.loadui', name: 'testFx', version: '3.1.2'
    testCompile group: 'org.testfx', name: 'testfx-core', version: '4.0.8-alpha'
    compile group: 'junit', name: 'junit', version: '4.12'
}

test {
    testLogging.showStandardStreams = true
}

jfx {
    mainClass = 'Main'
    vendor = 'arxa'
    bundler = 'windows.app'
    bundleArguments = [
            'runtime': 'C:\\Program Files\\Java\\jdk1.8.0_144\\jre'
    ]
}